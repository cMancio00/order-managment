<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>order</groupId>
	<artifactId>managment</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>managment</name>
	<url>https://github.com/cMancio00/order-managment</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.release>11</maven.compiler.release>
		<!-- Sonar -->
		<sonar.version>4.0.0.4121</sonar.version>
		<sonar.organization>cmancio00</sonar.organization>
		<sonar.projectKey>cMancio00_order-managment</sonar.projectKey>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<sonar.coverage.exclusions>
			**/model/*,
			**/app/*
		</sonar.coverage.exclusions>
		<sonar.junit.reportPaths>
			${project.build.directory}/surefire-reports,
			${project.build.directory}/failsafe-reports
		</sonar.junit.reportPaths>
		<!-- Circular dependencies between classes in the same package should be
		resolved
		This is the way of how hibernate handles relations -->
		<sonar.issue.ignore.multicriteria>e01,eS2699,eS117,eS2068</sonar.issue.ignore.multicriteria>
		<sonar.issue.ignore.multicriteria.e01.ruleKey>
			javaarchitecture:S7027
		</sonar.issue.ignore.multicriteria.e01.ruleKey>
		<sonar.issue.ignore.multicriteria.e01.resourceKey>
			**/Client.java
		</sonar.issue.ignore.multicriteria.e01.resourceKey>
		<sonar.issue.ignore.multicriteria.eS2699.ruleKey>
			java:S2699
		</sonar.issue.ignore.multicriteria.eS2699.ruleKey>
		<!-- Test case without assertions -->
		<sonar.issue.ignore.multicriteria.eS2699.resourceKey>
			**/*Swing*.java
		</sonar.issue.ignore.multicriteria.eS2699.resourceKey>
		<!-- Local variables names should comply with a naming convention -->
		<sonar.issue.ignore.multicriteria.eS117.ruleKey>
			java:S117
		</sonar.issue.ignore.multicriteria.eS117.ruleKey>
		<sonar.issue.ignore.multicriteria.eS117.resourceKey>
			**/*Swing.java
		</sonar.issue.ignore.multicriteria.eS117.resourceKey>
		<!-- Hard coded database password, out of the scope of PoC-->
		<sonar.issue.ignore.multicriteria.eS2068.ruleKey>
			java:S2068
		</sonar.issue.ignore.multicriteria.eS2068.ruleKey>
		<sonar.issue.ignore.multicriteria.eS2068.resourceKey>
			**/*App.java
		</sonar.issue.ignore.multicriteria.eS2068.resourceKey>
		<!-- end Sonar-->
		<jupiter.version>5.11.2</jupiter.version>
		<assertj.version>3.26.3</assertj.version>
		<hibernate.version>6.6.1.Final</hibernate.version>
		<h2.version>2.3.232</h2.version>
		<jacoco.version>0.8.12</jacoco.version>
		<pit.version>1.15.2</pit.version>
		<pit.jupiter.version>1.2.1</pit.jupiter.version>
		<mockito.jupiter.version>5.14.2</mockito.jupiter.version>
		<mysql.version>9.1.0</mysql.version>
		<testcontainers.version>1.20.3</testcontainers.version>
		<assertj-swing.version>3.17.1</assertj-swing.version>
		<picocli.version>4.6.1</picocli.version>
		<log4j.version>2.24.1</log4j.version>

	</properties>

	<dependencyManagement>
		<dependencies>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${jupiter.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${jupiter.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>${mockito.jupiter.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Hibernate and H2 test database-->
		<dependency>
			<groupId>org.hibernate.orm</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- MySQL Connector -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<version>${mysql.version}</version>
		</dependency>

		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mysql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>${jupiter.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-swing-junit</artifactId>
			<version>${assertj-swing.version}</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
			<version>${picocli.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j.version}</version>
		</dependency>


	</dependencies>

	<build>
		<pluginManagement><!-- lock down plugins versions to avoid using Maven
			defaults (may be moved to parent pom) -->
			<plugins>
				<!-- clean lifecycle, see
				https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>
				<!-- default lifecycle, jar packaging: see
				https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.13.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.3.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.4.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>
				<!-- site lifecycle, see
				https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.12.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-project-info-reports-plugin</artifactId>
					<version>3.6.1</version>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
					<configuration>
						<excludes>
							<exclude>**/model/*</exclude>
							<exclude>**/app/*</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<!-- binds by default to the phase "initialize" -->
								<goal>prepare-agent</goal>
								<!-- binds by default to the phase "verify" -->
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar.version}</version>
				</plugin>
				<plugin>
					<groupId>org.pitest</groupId>
					<artifactId>pitest-maven</artifactId>
					<version>${pit.version}</version>
					<dependencies>
						<dependency>
							<groupId>org.pitest</groupId>
							<artifactId>pitest-junit5-plugin</artifactId>
							<version>${pit.jupiter.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<targetClasses>
							<!-- Classes to mutate -->
							<param>**.repository.*</param>
							<param>**.service.*</param>
							<param>**.controller.*</param>
						</targetClasses>
						<targetTests>
							<!-- Test to use -->
							<param>**.repository.*</param>
							<param>managment.service.*</param>
							<param>**.controller.*</param>
						</targetTests>
						<mutators>
							<mutator>STRONGER</mutator>
						</mutators>
						<mutationThreshold>80</mutationThreshold>
						<historyInputFile>${project.basedir}/pitHistory</historyInputFile>
						<historyOutputFile>${project.basedir}/pitHistory</historyOutputFile>
						<features>
							<feature>+auto_threads</feature>
						</features>
						<verbose>true</verbose>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.1</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>jacoco</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>mutation-testing</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>mutationCoverage</goal>
								</goals>
								<phase>verify</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
